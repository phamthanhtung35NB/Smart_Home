#include <Adafruit_NeoPixel.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <addons/TokenHelper.h>
#include <time.h>
#include "config.h"
#include <OneWire.h>
#include <DallasTemperature.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

// C·∫•u h√¨nh th·ªùi gian
// C·∫•u h√¨nh NTP
// Thay ƒë·ªïi bi·∫øn global
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "time.google.com", 25200, 60000);  // S·ª≠ d·ª•ng m√°y ch·ªß Google NTP

// Bi·∫øn ki·ªÉm tra h·ªá th·ªëng t·ª± ƒë·ªông mƒÉc ƒë·ªãnh l√† t·ª± ƒë·ªông
bool autoSystem = true;

// C·∫•u h√¨nh c·∫£m bi·∫øn nhi·ªát ƒë·ªô DS18B20
#define ONE_WIRE_BUS 23
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
float lastTemperature = -127.00;  // Initialize with an invalid tempe

// C·∫•u h√¨nh WiFi
const char *ssid = WIFI_SSID;
const char *password = WIFI_PASSWORD;

// C·∫•u h√¨nh Firebase
FirebaseConfig configF;
FirebaseAuth auth;
FirebaseData fbdo;

// C·∫•u h√¨nh NeoPixel led rgb
#define LED_PIN 4
#define NUMPIXELS 18
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, LED_PIN, NEO_GRB + NEO_KHZ800);

// Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu tr∆∞·ªõc khi update data t·ª´ Firebase
int brightness = 200;                              // ƒê·ªô s√°ng m·∫∑c ƒë·ªãnh
int speed = 50;                                    // T·ªëc ƒë·ªô m·∫∑c ƒë·ªãnh
uint32_t selectedColor = pixels.Color(255, 0, 0);  // M√†u m·∫∑c ƒë·ªãnh (ƒë·ªè)
int currentEffect = 0;                             // Hi·ªáu ·ª©ng hi·ªán t·∫°i

bool is_bom = true;              // Tr·∫°ng th√°i m√°y b∆°m
bool is_led = true;              // Tr·∫°ng th√°i ƒë√®n l·ªõn
bool lampState = true;           // Tr·∫°ng th√°i ƒë√®n b√†n h·ªçc
bool levelLampHighState = true;  // Tr·∫°ng th√°i ƒë√®n b√†n h·ªçc k√≠ch ho·∫°t tƒÉng c∆∞·ªùng s√°ng


int airPumpSpeed = 5;  // T·ªëc ƒë·ªô m√°y b∆°m kh√≠
// const int btn_bom = 9;
const int ena = 5;  // PWM pin for air pump
// const int in1 = 4;
const int bomKKLow = 18;        // ƒêi·ªÅu khi·ªÉn m√°y b∆°m (b∆°m kh√≠)
const int LedBeLow = 19;       // ƒêi·ªÅu khi·ªÉn ƒë√®n b·ªÉ c√°
const int lamp = 21;           // ƒêi·ªÅu khi·ªÉn ƒë√®n b√†n h·ªçc
const int levelLampHigh = 22;  // ƒêi·ªÅu khi·ªÉn ƒë√®n b√†n h·ªçc k√≠ch ho·∫°t tƒÉng c∆∞·ªùng s√°ng

/**
 * Kh·ªüi t·∫°o wifi
 * s·∫Ω lu√¥n ch·∫°y cho ƒë·∫øn khi k·∫øt n·ªëi th√†nh c√¥ng
 * @return bool
 */
bool initWifi() {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to WiFi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    return true;
  } else {
    Serial.println("\nFailed to connect to WiFi");
    return false;
  }
}

/**
 * H√†m callback khi token h·∫øt h·∫°n v√† kh∆°i t·∫°o l·∫°i token \\ kh·ªüi t·∫°o l·∫°i token
 * @param error
 * @return void
 */
void initTimeClient() {
  timeClient.begin();
  timeClient.setTimeOffset(25200);  // 7 hours offset in seconds
  timeClient.forceUpdate();         //  C·∫≠p nh·∫≠t th·ªùi gian t·ª´ server NTP ngay l·∫≠p t·ª©c
}

/**
 * H√†m callback khi token h·∫øt h·∫°n v√† kh∆°i t·∫°o l·∫°i token
 * @param error
 * @return void
 */
void initFirebase() {
  configF.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  configF.database_url = DATABASE_URL;
  configF.token_status_callback = tokenStatusCallback;
  Firebase.begin(&configF, &auth);
  Firebase.reconnectWiFi(true);

  // B·∫Øt ƒë·∫ßu stream 
  if (!Firebase.RTDB.beginStream(&fbdo, "/")) {
    Serial.printf("Stream setup failed: %s\n", fbdo.errorReason().c_str());
  } else {
    Serial.println("Firebase stream initialized successfully.");
  }
}

/**
 * H√†m ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ Firebase
 * @return void
 */
void _syncDataFromFirebase() {
  if (Firebase.RTDB.getBool(&fbdo, "/status/auto")) {
    autoSystem = fbdo.boolData();
  }
  if (Firebase.RTDB.getBool(&fbdo, "/lamp/status")) {
    lampState = fbdo.boolData();
    updateLamp();
  }
  if (Firebase.RTDB.getBool(&fbdo, "/lamp/level")) {
    levelLampHighState = fbdo.boolData();
    updateLamp();
  }
  // ƒê·ªçc tr·∫°ng th√°i m√°y b∆°m
  if (Firebase.RTDB.getBool(&fbdo, "/aquarium/waterPump")) {
    is_bom = fbdo.boolData();
    if (is_bom) {
      digitalWrite(bomKKLow, LOW);
    } else {
      digitalWrite(bomKKLow, HIGH);
    }
  }

  // ƒê·ªçc tr·∫°ng th√°i ƒë√®n l·ªõn
  if (Firebase.RTDB.getBool(&fbdo, "/aquarium/bigLight")) {
    is_led = fbdo.boolData();
    digitalWrite(LedBeLow, is_led ? LOW:HIGH );
  }

  // ƒê·ªçc t·ªëc ƒë·ªô m√°y b∆°m kh√≠
  if (Firebase.RTDB.getInt(&fbdo, "/aquarium/airPumpSpeed")) {
    airPumpSpeed = fbdo.intData();
    analogWrite(ena, map(airPumpSpeed, 0, 9, 0, 255));
  }

  // ƒê·ªçc d·ªØ li·ªáu LED
  if (Firebase.RTDB.getInt(&fbdo, "/led/currentEffect")) {
    currentEffect = fbdo.intData();
  }
  if (Firebase.RTDB.getInt(&fbdo, "/led/brightness")) {
    brightness = fbdo.intData();
    pixels.setBrightness(brightness);
  }
  if (Firebase.RTDB.getInt(&fbdo, "/led/speed")) {
    speed = fbdo.intData();
  }
  if (Firebase.RTDB.getJSON(&fbdo, "/led/color")) {
    FirebaseJson json = fbdo.jsonObject();
    FirebaseJsonData jsonData;

    json.get(jsonData, "r");
    int r = jsonData.success ? jsonData.to<int>() : 0;

    json.get(jsonData, "g");
    int g = jsonData.success ? jsonData.to<int>() : 0;

    json.get(jsonData, "b");
    int b = jsonData.success ? jsonData.to<int>() : 0;

    selectedColor = pixels.Color(r, g, b);
  }
}


void setup() {
  Serial.println("Starting...");
  Serial.begin(115200);
  pixels.begin();
  pixels.setBrightness(brightness);
  // Kh·ªüi t·∫°o c√°c ch√¢n GPIO
  //  pinMode(btn_bom, INPUT);
  pinMode(LedBeLow, OUTPUT);
  digitalWrite(LedBeLow, HIGH);
  pinMode(ena, OUTPUT);
  pinMode(bomKKLow, OUTPUT);
  pinMode(lamp, OUTPUT);
  digitalWrite(lamp, HIGH);
  pinMode(levelLampHigh, OUTPUT);
  digitalWrite(levelLampHigh, HIGH);

  // K·∫øt n·ªëi WiFi v√† Firebase
  if (initWifi()) {
    Serial.println("WiFi connected");

    delay(1000);
    initTimeClient();
    Serial.println("Time client connected");

    delay(500);
    initFirebase();
    Serial.println("Firebase connected");

    _syncDataFromFirebase();  // ƒê·ªìng b·ªô d·ªØ li·ªáu ban ƒë·∫ßu
    Serial.println("Sync data from Firebase");

    sensors.begin();  // Start temperature sensor
    Serial.println("Temperature sensor started");

    updateTemperature();  // Push initial temperature data
    Serial.println("Initial temperature data pushed");
  } else {
    Serial.println("Cannot proceed without WiFi connection.");
    initWifi();
  }
  Serial.println("setup done");
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√®n b√†n h·ªçc
void updateLamp() {
  if (lampState == true) {
    digitalWrite(lamp, LOW);  // T·∫Øt ƒë√®n
  } else {
    digitalWrite(lamp, HIGH);  // B·∫≠t ƒë√®n
  }

  if (levelLampHighState == true) {
    digitalWrite(levelLampHigh, LOW);  // T·∫Øt ƒë√®n
  } else {
    digitalWrite(levelLampHigh, HIGH);  // B·∫≠t ƒë√®n
  }
}

// C·∫≠p nh·∫≠t nhi·ªát ƒë·ªô l√™n Firebase
void updateTemperature() {
  float temperature = sensors.getTempCByIndex(0);
  if (temperature != -127.00) {
    Firebase.RTDB.setFloat(&fbdo, "/aquarium/temperature", temperature);
    Serial.print("Updated temperature to Firebase: ");
    Serial.println(temperature);
  }
}

/**
 * H√†m x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Firebase stream
 * @return void
 */
void handleFirebaseStream() {
  String path = fbdo.dataPath();
  if (path == "/status/auto") {
    autoSystem = fbdo.boolData();
    updateLamp();
  } else if (path == "/lamp/status") {
    lampState = fbdo.boolData();
    updateLamp();
  } else if (path == "/aquarium/bigLight") {
    is_led = fbdo.boolData();
    //        digitalWrite(LedBeLow, is_led ? HIGH : LOW);
    if (is_led == true && autoSystem == false) {
      digitalWrite(LedBeLow, LOW);
    } else if (is_led == false && autoSystem == false) {
      digitalWrite(LedBeLow, );
    }
  } else if (path == "/led/currentEffect") {
    currentEffect = fbdo.intData();
  }

  if (path == "/lamp/level") {
    levelLampHighState = fbdo.boolData();
    updateLamp();
  } else if (path == "/aquarium/waterPump") {
    is_bom = fbdo.boolData();
    //        digitalWrite(bomKKLow, is_bom ? HIGH : LOW);
    if (is_bom == true && autoSystem == false) {
      digitalWrite(bomKKLow, LOW);
    } else if (is_bom == false && autoSystem == false) {
      digitalWrite(bomKKLow, HIGH);
    }
  } else if (path == "/led/brightness") {
    brightness = fbdo.intData();
    pixels.setBrightness(brightness);
  }

  if (path == "/aquarium/airPumpSpeed") {
    airPumpSpeed = fbdo.intData();
    analogWrite(ena, map(airPumpSpeed, 0, 9, 0, 255));
  } else if (path == "/led/speed") {
    speed = fbdo.intData();
  } else if (path == "/led/color") {
    FirebaseJson json = fbdo.jsonObject();
    FirebaseJsonData jsonData;

    json.get(jsonData, "r");
    int r = jsonData.success ? jsonData.to<int>() : 0;

    json.get(jsonData, "g");
    int g = jsonData.success ? jsonData.to<int>() : 0;

    json.get(jsonData, "b");
    int b = jsonData.success ? jsonData.to<int>() : 0;

    selectedColor = pixels.Color(r, g, b);
  }
}

// bi·∫øn ki·ªÉm tra ƒë√£ c·∫≠p nh·∫≠t th·ªùi gian l√™n Firebase ch∆∞a
bool initTimeUpFirebase = false;

/**
 * H√†m t·ª± ƒë·ªông ch·∫°y h·ªá th·ªëng
 *  c·∫≠p nh·∫≠t th·ªùi gian, b·∫≠t ƒë√®n, b·∫≠t b∆°m n∆∞·ªõc
 * @return void
 */

void autoRunSystem() {
  if (timeClient.isTimeSet()) {                           // Ki·ªÉm tra xem th·ªùi gian ƒë√£ ƒë∆∞·ª£c set ch∆∞a
    unsigned long epochTime = timeClient.getEpochTime();  // L·∫•y th·ªùi gian epoch t·ª´ NTPClient (UTC)
    struct tm *ptm = gmtime((time_t *)&epochTime);        // Chuy·ªÉn epoch time sang struct tm

    int currentHour = timeClient.getHours();      // L·∫•y gi·ªù tr·ª±c ti·∫øp t·ª´ NTPClient
    int currentMinute = timeClient.getMinutes();  // L·∫•y ph√∫t tr·ª±c ti·∫øp t·ª´ NTPClient

    Serial.println("üïí Time: " + String(currentHour) + ":" + (currentMinute < 10 ? "0" : "") + String(currentMinute));

    // C·∫≠p nh·∫≠t th·ªùi gian l√™n Firebase v√†o l√∫c kh·ªüi ƒë·ªông
    if (initTimeUpFirebase == false) {
      timeClient.forceUpdate();  // G·ªçi forceUpdate tr∆∞·ªõc khi l∆∞u l√™n Firebase
      currentHour = timeClient.getHours();
      currentMinute = timeClient.getMinutes();

      String currentTime = String(currentHour) + ":" + (currentMinute < 10 ? "0" : "") + String(currentMinute);
      Firebase.RTDB.setString(&fbdo, "/status/time", currentTime);
      initTimeUpFirebase = true;
    }

    // C·∫≠p nh·∫≠t th·ªùi gian l√™n Firebase v√†o c√°c ph√∫t 00 v√† 30
    if (currentMinute == 0 || currentMinute == 20 ||currentMinute == 40) {
      timeClient.forceUpdate();  // G·ªçi forceUpdate tr∆∞·ªõc khi l∆∞u l√™n Firebase
      currentHour = timeClient.getHours();
      currentMinute = timeClient.getMinutes();

      String currentTime = String(currentHour) + ":" + (currentMinute < 10 ? "0" : "") + String(currentMinute);
      Firebase.RTDB.setString(&fbdo, "/status/time", currentTime);
      delay(60000);  // Tr√°nh c·∫≠p nh·∫≠t nhi·ªÅu l·∫ßn trong c√πng m·ªôt ph√∫t
    }

    // T·ª± ƒë·ªông b·∫≠t ƒë√®n bigLight t·ª´ 9h-22h h√†ng ng√†y
    if (currentHour >= 9 && currentHour < 23) {
        if (is_led == false) {
          digitalWrite(LedBeLow, LOW);
          Firebase.RTDB.setBool(&fbdo, "/status/bigLight", true);
          Firebase.RTDB.setBool(&fbdo, "/aquarium/bigLight", true);
          is_led = true;
        }

    } else {
        if (is_led == true) {
          digitalWrite(LedBeLow, HIGH);
          Firebase.RTDB.setBool(&fbdo, "/status/bigLight", false);
          Firebase.RTDB.setBool(&fbdo, "/aquarium/bigLight", false);
          is_led = false;
        }
    }

    // T·ª± ƒë·ªông b·∫≠t b∆°m n∆∞·ªõc waterPump theo l·ªãch tr√¨nh h√†ng ng√†y
    if ((currentHour == 4 && currentMinute >= 30) || (currentHour >= 5 && currentHour < 8) || (currentHour >= 9 && currentHour < 12) || (currentHour >= 13 && currentHour < 16) || (currentHour >= 17 && currentHour < 20) || (currentHour >= 21)) {
      if (is_bom == false) {
        digitalWrite(bomKKLow, LOW);
        Firebase.RTDB.setBool(&fbdo, "/status/waterPump", true);
        Firebase.RTDB.setBool(&fbdo, "/aquarium/waterPump", true);
        is_bom = true;
      }
    } else {
     if (is_bom == true) {
        digitalWrite(bomKKLow, HIGH);
        Firebase.RTDB.setBool(&fbdo, "/status/waterPump", false);
        Firebase.RTDB.setBool(&fbdo, "/aquarium/waterPump", false);
        is_bom = false;
      }
    }
  } else {
    Serial.println("Waiting for NTP time sync...");
    timeClient.forceUpdate();
  }
  // delay(1000);
}

/**
 * H√†m l·∫•y nhi·ªát ƒë·ªô t·ª´ c·∫£m bi·∫øn DS18B20
 * Update nhi·ªát ƒë·ªô l√™n Firebase n·∫øu c√≥ s·ª± thay ƒë·ªïi
 * @return void
 */
void getTemperatures() {
  sensors.requestTemperatures();
  // L·∫•y nhi·ªát ƒë·ªô t·ª´ c·∫£m bi·∫øn DS18B20 (ch·ªâ c√≥ 1 c·∫£m bi·∫øn) 0 l√† ch·ªâ s·ªë c·ªßa c·∫£m bi·∫øn nhi·ªát ƒë·ªô 1
  float currentTemperature = sensors.getTempCByIndex(0);
  if (currentTemperature == -127.00) {
    sensors.begin();
    Serial.println("‚ö†Ô∏è Error: DS18B20 sensor not found!");
  } else {
    if (abs(currentTemperature - lastTemperature) > 0.1) {
      Serial.print("üå°Ô∏è Temperature: ");
      Serial.print(lastTemperature);
      Serial.print(" - ");
      Serial.print(currentTemperature);
      Serial.println(" ¬∞C");
      lastTemperature = currentTemperature;
      updateTemperature();
    }
  }
}

void loop() {
  // autoSyncTime();
  // khi h·ªá th·ªëng t·ª± ƒë·ªông, chay autoRunSystem
  if (autoSystem) {
    autoRunSystem();
  }
  getTemperatures();
  //ki·ªÉm tra k·∫øt n·ªëi wifi
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi disconnected. Reconnecting...");
    initWifi();
  }
  // Ki·ªÉm tra k·∫øt n·ªëi Firebase
  if (Firebase.ready()) {
    // Ki·ªÉm tra stream
    if (Firebase.RTDB.readStream(&fbdo)) {
      // Ki·ªÉm tra d·ªØ li·ªáu stream
      if (fbdo.streamAvailable()) {
        Serial.print("new data available: ");
        handleFirebaseStream();
      }
    }
  }
  delay(100);
  // Execute LED effects based on currentEffect
  executeLEDEffects();
}
// H√†m th·ª±c thi hi·ªáu ·ª©ng LED d·ª±a tr√™n currentEffect
void executeLEDEffects() {
  switch (currentEffect) {
    case 0:
      tatDen();
      break;
    case 1:
      pixels.setBrightness(brightness);
      rotatingColors(speed / 5);
      break;
    case 2:
      pixels.setBrightness(brightness);
      nhipDap(speed / 10);
      break;
    case 3:
      pixels.setBrightness(brightness);
      nhipDapWithColor(speed / 10);
      break;
    case 4:
      pixels.setBrightness(brightness);
      nuocChay(selectedColor, speed);
      break;
    case 5:
      pixels.setBrightness(brightness);
      muaRoi(speed, 3);
      break;
    case 6:
      pixels.setBrightness(brightness);
      randomBlink(speed);
      break;
    case 7:
      pixels.setBrightness(brightness);
      strobeEffect(selectedColor, speed);
      break;
    case 8:
      pixels.setBrightness(brightness);
      chaseEffect(selectedColor, speed);
      break;
  }
  pixels.setBrightness(brightness);
}
// Hi·ªáu ·ª©ng l·∫•p ƒë·∫ßy m√†u
void nuocChay(uint32_t color, int wait) {
  for (int i = pixels.numPixels(); i >= 0; i--) {
    pixels.setPixelColor(i, color);
    pixels.show();
    delay(wait);
  }
  for (int i = pixels.numPixels(); i >= 0; i--) {
    pixels.setPixelColor(i, 0);
    pixels.show();
    delay(wait);
  }
}

// Hi·ªáu ·ª©ng l·∫•p l√°nh
// wait: th·ªùi gian ch·ªù
// iterations: s·ªë l·∫ßn l·∫∑p
void muaRoi(int speed, int iterations) {
  for (int iter = 0; iter < iterations; iter++) {
    // Hi·ªáu ·ª©ng t·ª´ ph·∫£i sang tr√°i
    for (int i = NUMPIXELS - 1; i >= 0; i--) {
      int rgb1 = random(255);
      int rgb2 = random(255);
      int rgb3 = random(255);

      // B·∫≠t pixel v·ªõi m√†u ng·∫´u nhi√™n
      pixels.setPixelColor(i, pixels.Color(rgb1, rgb2, rgb3));
      pixels.show();
      delay(speed);  // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô

      // T·∫Øt pixel
      pixels.setPixelColor(i, pixels.Color(0, 0, 0));
    }

    // Hi·ªáu ·ª©ng t·ª´ tr√°i sang ph·∫£i
    for (int i = 0; i < NUMPIXELS; i++) {
      int rgb1 = random(255);
      int rgb2 = random(255);
      int rgb3 = random(255);

      // B·∫≠t pixel v·ªõi m√†u ng·∫´u nhi√™n
      pixels.setPixelColor(i, pixels.Color(rgb1, rgb2, rgb3));
      pixels.show();
      delay(speed);  // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô

      // T·∫Øt pixel
      pixels.setPixelColor(i, pixels.Color(0, 0, 0));
    }
  }
}

// Hi·ªáu ·ª©ng nh·ªãp ƒë·∫≠p
void nhipDap(int speed) {
  int rgb1 = random(255);
  int rgb2 = random(255);
  int rgb3 = random(255);
  uint32_t color = pixels.Color(rgb1, rgb2, rgb3);

  // TƒÉng ƒë·ªô s√°ng
  for (int j = 0; j < 255; j++) {
    pixels.fill(color, 0, NUMPIXELS);
    pixels.setBrightness(j);
    pixels.show();
    delay(speed);  // S·ª≠ d·ª•ng speed ƒë·ªÉ ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô
  }

  // Gi·∫£m ƒë·ªô s√°ng
  for (int j = 255; j >= 0; j--) {
    pixels.fill(color, 0, NUMPIXELS);
    pixels.setBrightness(j);
    pixels.show();
    delay(speed);  // S·ª≠ d·ª•ng speed ƒë·ªÉ ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô
  }
}

void nhipDapWithColor(int speed) {
  // TƒÉng ƒë·ªô s√°ng
  for (int j = 0; j < 255; j++) {
    pixels.fill(selectedColor, 0, NUMPIXELS);
    pixels.setBrightness(j);
    pixels.show();
    delay(speed);  // S·ª≠ d·ª•ng speed ƒë·ªÉ ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô
  }

  // Gi·∫£m ƒë·ªô s√°ng
  for (int j = 255; j >= 0; j--) {
    pixels.fill(selectedColor, 0, NUMPIXELS);
    pixels.setBrightness(j);
    pixels.show();
    delay(speed);  // S·ª≠ d·ª•ng speed ƒë·ªÉ ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô
  }
}

// t·∫Øt ƒë√®n
void tatDen() {
  pixels.clear();
  pixels.show();
}

//Hi·ªáu ·ª©ng xoay v√≤ng (Rotating Colors)
void rotatingColors(int wait) {
  static uint8_t hue = 0;
  for (int i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(i, Wheel((hue + i * 256 / pixels.numPixels()) & 255));
  }
  pixels.show();
  hue++;
  delay(wait);
}

//Hi·ªáu ·ª©ng nh·∫•p nh√°y ng·∫´u nhi√™n (Random Blink)
void randomBlink(int wait) {
  for (int i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(i, pixels.Color(random(255), random(255), random(255)));
  }
  pixels.show();
  delay(wait);
  pixels.clear();
  pixels.show();
  delay(wait);
}

// Hi·ªáu ·ª©ng ƒëu·ªïi m√†u (Chase Effect)
void chaseEffect(uint32_t color, int wait) {
  for (int i = 0; i < pixels.numPixels(); i++) {
    pixels.setPixelColor(i, color);
    pixels.show();
    delay(wait);
    pixels.setPixelColor(i, 0);
  }
}

// Hi·ªáu ·ª©ng l·∫•p l√°nh theo nh·ªãp (Strobe Effect)
void strobeEffect(uint32_t color, int wait) {

  pixels.fill(color, 0, NUMPIXELS);
  pixels.show();
  delay(wait);
  pixels.clear();
  pixels.show();
  delay(wait);
}

// H√†m h·ªó tr·ª£ cho hi·ªáu ·ª©ng c·∫ßu v·ªìng
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if (WheelPos < 85) {
    return pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if (WheelPos < 170) {
    WheelPos -= 85;
    return pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}